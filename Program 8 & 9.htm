<html>
<head>
  <title>Skeleton for Future JS Programs</title>
  <script>
  
    String.prototype.format = function () {
      var args = arguments;
      return this.replace(/{(\d+)(:(c|f)(\d))?}/g, function (match, number) {
        if (arguments[2] === undefined)
          return args[number] === undefined ? '{' + number + '}' : args[number]
        ;
        var ch = arguments[3].charCodeAt(0);
        var n = Number(arguments[4]);
        if (ch == 102)
          return Number(args[number]).toFixed(index);

        return args[number].toLocaleString("en-US",{
             style: "currency",
             currency: "USD",
             minimumFractionDigits: n,
             maximumFractionDigits: n
           });

      });

    };


    function createTable(str, sep) {
      if (sep===undefined) sep=',';
      var s = "<table>";
      var data = str.split("\n");
      var aligns = ['"center"', '"right"'];
      for (var i = 0; i < data.length; i++) {
        var data2 = data[i].split(sep);
        s += "<tr>";
        for (var j = 0; j < data2.length; j++) {
          s += "<td";
          if (data2[j].charAt(0) == '%') {
            var ch = data2[j].charAt(1);
            s += " align=" + aligns[ch];
            j++;
          }
          s += ">" + data2[j] + "</td>";
        }
        s += "</tr>";
      }
      return s + "</table>";
    }


function getAverage(emps){
  var total=0;
for (var i=0; i< emps.length; i++)
 total += Number(emps[i].Income);
 return total/emps.length;

}

function getHighest(emps){
var hi = emps[0].Income;
for (var i=1; i <emps.length; i++)
if (Number(emps[i].Income)>Number(hi)) hi = emps[i].Income;
return hi;

}

function processByIncome(){

var text = document.getElementById("txt").value;
var el = document.getElementById("output");

// regular expressions describe pstternd in text 
// uses a meta- language to describe the patterns 
// in js /  / delimits a regex 
//\s means white - blanks , newlines, tabs 
// + is a quantifier means 1 or more
// all modern platforms - jvm, .NET, browsers
//support regex 
var data = text.split(/\s+/);
var s ="Name,%1,Income";

// right now all the data is in an array 
// but we are going to put data in objects
var emps =[];
for (var i=0; i< data.length; i+=2){

 var employee = {};
 employee.Name= data[i];
 employee.Income = data[i+1];
 emps.push(employee);

}
emps.sort(function (emp1,emp2){
  
});
for (var i=0; i< emps.length; i++){
  s+='\n'+emps[i].Name+','+emps[i].Income;
  
  
}
 s +="\nAverage,$"+getAverage(emps).toFixed(2)+
"\nHighest,%1,"+getHighest(emps);
 
el.innerHTML = createTable(s);



}

function processByName(){

var text = document.getElementById("txt").value;
var el = document.getElementById("output");

// regular expressions describe pstternd in text 
// uses a meta- language to describe the patterns 
// in js /  / delimits a regex 
//\s means white - blanks , newlines, tabs 
// + is a quantifier means 1 or more
// all modern platforms - jvm, .NET, browsers
//support regex 
var data = text.split(/\s+/);
var s ="Name,%1,Income";

// right now all the data is in an array 
// but we are going to put data in objects
var emps =[];
for (var i=0; i< data.length; i+=2){

 var employee = {};
 employee.Name= data[i];
 employee.Income = data[i+1];
 emps.push(employee);

}
 emps.sort(function (emp1,emp2){

    return emp1.Name.localeCompare(emp2.Name);

  });
for (var i=0; i< emps.length; i++){
  s+='\n'+emps[i].Name+','+emps[i].Income;
  
  
}
 s +="\nAverage,$"+getAverage(emps).toFixed(2)+
"\nHighest,%1,"+getHighest(emps);
 
el.innerHTML = createTable(s);

}
function process(){

var text = document.getElementById("txt").value;
var el = document.getElementById("output");

// regular expressions describe pstternd in text 
// uses a meta- language to describe the patterns 
// in js /  / delimits a regex 
//\s means white - blanks , newlines, tabs 
// + is a quantifier means 1 or more
// all modern platforms - jvm, .NET, browsers
//support regex 
var data = text.split(/\s+/);
var s ="Name,%1,Income";

// right now all the data is in an array 
// but we are going to put data in objects
var emps =[];
for (var i=0; i< data.length; i+=2){

 var employee = {};
 employee.Name= data[i];
 employee.Income = data[i+1];
 emps.push(employee);

}

for (var i=0; i< emps.length; i++){
  s+='\n'+emps[i].Name+','+emps[i].Income;
  
  
}
 s +="\nAverage,$"+getAverage(emps).toFixed(2)+
"\nHighest,%1,"+getHighest(emps);
 
el.innerHTML = createTable(s);



}
function init(){

  var el= document.getElementById("hdg");
  el.innerHTML = "<center><h1>Program 8 & 9</h1></center>";
  var s = "Enter 1 or more employees <br>"+
  '<input type ="text" id= "txt" /><br>'+
  '<input type = "button" value="List As Entered" onclick= "process()" />'+
  '<input type = "button" value="List By Name" onclick= "processByName()" />'+
  '<input type = "button" value="List By Income" onclick= "processByIncome()" />';
  el = document.getElementById("input");
  el.innerHTML = s;
  
}
  </script>

  <style>
    

    body {
      background-color: #111;
      color: #ffc;
      font-family: sans-serif;
    }

    
  </style>


</head>
<body onload="init()" >
  <div id="hdg">&nbsp;</div>
  <table style="margin-top:40px">
    <tr>
      <td valign="top"><div id="input"></div></td>
      <td>&nbsp; &nbsp; </td>
      <td>
        <div style="width:300px; height:380px; border-left: 1px solid white; padding-left:1em" 
            id="output"> 
          </div>
      </td>
    </tr>
  </table>
</body>

</html>